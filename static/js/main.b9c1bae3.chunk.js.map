{"version":3,"sources":["use-countries/get-features.ts","use-countries/get-properties.ts","use-countries/get-countries.ts","use-countries/use-countries.ts","Globe/Globe.tsx","App.tsx","index.tsx"],"names":["countries110m","getFeatures","a","fetch","res","json","topology","countries","objects","feature","features","Error","countriesPropertiesUrl","notFoundCountry","id","name","position","getProperties","csv","then","data","map","row","latitude","longitude","Number","Promise","all","properties","mapPropertiesToFeatures","countryProperties","find","p","useCountries","React","setCountries","status","setStatus","error","setError","current","getCountries","catch","Globe","size","rest","oceanColor","landColor","svgStyle","fill","circleStyle","height","width","initialScale","center","rotateX","rotateY","rotateZ","rotation","dragSensitivity","minScroll","maxScroll","centerX","centerY","circleR","svgRef","projection","geoOrthographic","scale","rotate","translate","pathGenerator","geoPath","length","svg","select","countriesPaths","selectAll","globeCircle","countriesDataJoin","join","zoomBehaviour","zoom","on","event","scrollValue","transform","k","attr","dragBehaviour","drag","rotationX","rotationY","dx","dy","call","ref","style","cx","cy","r","country","onClick","console","log","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9c1bae3.chunk.js","sourcesContent":["import { FeatureCollection } from 'geojson';\nimport { feature } from 'topojson-client';\nimport { Topology } from 'topojson-specification';\nimport { Feature as BaseFeature, GeoJsonProperties, Geometry } from 'geojson';\n\nexport type Feature = BaseFeature<Geometry, GeoJsonProperties>;\nexport type Features = Feature[];\n\n/**\n * A fixed version of World Atlas Countries 110m\n *\n * https://github.com/Fil/visionscarto-world-atlas\n */\nconst countries110m =\n  'https://unpkg.com/visionscarto-world-atlas@0.0.6/world/110m.json';\n\n/**\n * Fetches TopoJSON data from CDN and transforms it to Feature Collection using \"feature\"\n * helper from topojson-client\n */\nexport async function getFeatures(): Promise<Features> {\n  const res = await fetch(countries110m);\n  const topology: Topology = await res.json();\n  const countries = topology.objects.countries;\n\n  if (countries) {\n    const { features } = feature(topology, countries) as FeatureCollection;\n\n    return features;\n  } else {\n    throw new Error(`There was no \"countries\" object in \"topology.objects\"`);\n  }\n}\n","import { csv } from 'd3';\n\n/**\n * Countries Properties CSV\n *\n * For each country in this dataset there is\n * - id - ISO code of the country (the same code that is used for ID by World Atlas)\n * - name\n * - latitude\n * - longitude\n */\nconst countriesPropertiesUrl =\n  'https://gist.githubusercontent.com/sitek94/d1c99f4b1936ad047602cc569d30db6b/raw/countries.csv';\n\ntype Columns = 'id' | 'name' | 'latitude' | 'longitude';\n\ntype Position = [number, number];\n\nexport interface CountryProperties {\n  id: string;\n  name: string;\n  position: Position;\n}\nexport type CountriesProperties = CountryProperties[];\n\nconst bermudaTrianglePosition: Position = [\n  25.027684437991375, -70.99627570018042,\n];\n\n/**\n * This object is used in unlikely event when some field is missing from fetched CSV file.\n */\nexport const notFoundCountry: CountryProperties = {\n  id: 'unknown',\n  name: 'unknown',\n  position: bermudaTrianglePosition,\n};\n\n/**\n * Fetches the CSV file and transforms it\n */\nexport async function getProperties(): Promise<CountriesProperties> {\n  return csv<Columns>(countriesPropertiesUrl).then(data =>\n    data.map(row => {\n      const { id, name, latitude, longitude } = row;\n\n      // There are no missing fields in the dataset but just in case set\n      // default values\n      if (!id || !name || !latitude || !longitude) {\n        return notFoundCountry;\n      }\n\n      return {\n        id,\n        name,\n        position: [Number(latitude), Number(longitude)],\n      };\n    }),\n  );\n}\n","import { getFeatures, Feature, Features } from './get-features';\nimport {\n  getProperties,\n  notFoundCountry,\n  CountryProperties,\n  CountriesProperties,\n} from './get-properties';\n\ninterface CountryFeature extends Feature {\n  properties: CountryProperties;\n}\nexport type CountriesFeatures = CountryFeature[];\n\n/**\n * Fetches both countries features and properties and then extends the features\n * by mapping the properties to them.\n */\nexport async function getCountries(): Promise<CountriesFeatures> {\n  const [features, properties] = await Promise.all([\n    getFeatures(),\n    getProperties(),\n  ]);\n\n  return mapPropertiesToFeatures(properties, features);\n}\n\nfunction mapPropertiesToFeatures(\n  properties: CountriesProperties,\n  features: Features,\n) {\n  return features.map(feature => {\n    const countryProperties = properties.find(p => p.id === feature.id);\n\n    return {\n      ...feature,\n      properties: countryProperties || notFoundCountry,\n    };\n  });\n}\n","import * as React from 'react';\n\nimport { getCountries, CountriesFeatures } from './get-countries';\n\ntype Status = 'idle' | 'pending' | 'resolved' | 'rejected';\n\nexport function useCountries() {\n  const [countries, setCountries] = React.useState<CountriesFeatures>([]);\n  const [status, setStatus] = React.useState<Status>('idle');\n  const [error, setError] = React.useState<Error | null>(null);\n\n  React.useEffect(() => {\n    let current = true;\n\n    setStatus('pending');\n\n    getCountries()\n      .then(countries => {\n        if (current) {\n          setStatus('resolved');\n          setCountries(countries);\n        }\n      })\n      .catch(error => {\n        if (current) {\n          setStatus('rejected');\n          setError(error);\n        }\n      });\n\n    return () => {\n      current = false;\n    };\n  }, []);\n\n  return { countries, status, error };\n}\n","import * as React from 'react';\nimport {\n  D3ZoomEvent,\n  geoOrthographic,\n  geoPath,\n  select,\n  zoom,\n  drag,\n  D3DragEvent,\n} from 'd3';\n\nimport { useCountries } from '../use-countries/use-countries';\n\nexport interface GlobeProps {\n  svgStyle?: React.CSSProperties;\n  circleStyle?: React.CSSProperties;\n  oceanColor?: string;\n  landColor?: string;\n\n  /**\n   * A shorthand for height and width of the SVG element\n   */\n  size?: number;\n\n  /**\n   * Height of the SVG\n   */\n  height?: number;\n\n  /**\n   * Width of the SVG\n   */\n  width?: number;\n\n  /**\n   *  Scale factor to be used for the projection\n   */\n  initialScale?: number;\n\n  /**\n   * A point specified as a two-dimensional array [longitude, latitude] in degrees.\n   * This will be the projection’s center.\n   */\n  center?: [number, number];\n\n  /**\n   * The x-axis rotation angle in degrees\n   */\n  rotateX?: number;\n\n  /**\n   * The y-axis rotation angle in degrees\n   */\n  rotateY?: number;\n\n  /**\n   * The z-axis rotation angle in degrees\n   */\n  rotateZ?: number;\n\n  /**\n   * Alternatively to separately specifying each rotation axis, you\n   * can provide them as an array [X,Y,Z]\n   */\n  rotation?: [number, number, number];\n\n  /**\n   * Drag sensitivity\n   */\n  dragSensitivity?: number;\n\n  /**\n   * Min scroll value\n   */\n  minScroll?: number;\n\n  /**\n   * Max scroll value\n   */\n  maxScroll?: number;\n}\n\nexport function Globe({ size = 400, ...rest }: GlobeProps) {\n  const {\n    oceanColor = '#eaedee',\n    landColor = '#17181d',\n    svgStyle = {\n      fill: landColor,\n    },\n    circleStyle = {\n      fill: oceanColor,\n    },\n    height = size,\n    width = size,\n    initialScale = size / 2,\n    center = [0, 0],\n    rotateX = 0,\n    rotateY = 0,\n    rotateZ = 0,\n    rotation = [rotateX, rotateY, rotateZ],\n    dragSensitivity = 75,\n    minScroll = 0.3,\n    maxScroll = 20,\n  } = rest;\n\n  // Variables\n\n  const centerX = width / 2;\n  const centerY = height / 2;\n  const circleR = initialScale;\n\n  // State\n\n  const svgRef = React.useRef<SVGSVGElement>(null);\n  const { countries } = useCountries();\n\n  // Projection\n  const projection = React.useMemo(\n    () =>\n      geoOrthographic()\n        .scale(initialScale)\n        .center(center)\n        .rotate(rotation)\n        .translate([centerX, centerY]),\n    [initialScale, center, rotation, centerX, centerY],\n  );\n\n  // Path generator\n  const pathGenerator = geoPath().projection(projection);\n\n  // Update `path` when `pathGenerator` changes\n  React.useEffect(() => {\n    if (svgRef.current && countries.length) {\n      interface SVGDatum {\n        width: number;\n        height: number;\n      }\n\n      interface PathDatum {\n        id: string;\n      }\n\n      const svg = select<SVGSVGElement, SVGDatum>(svgRef.current);\n      const countriesPaths = svg.selectAll<SVGPathElement, PathDatum>('path');\n      const globeCircle = svg.select<SVGCircleElement>('circle');\n\n      const countriesDataJoin = countriesPaths.data(countries).join('path');\n\n      /**\n       * Zoom behaviour\n       */\n      const zoomBehaviour = zoom<SVGSVGElement, SVGDatum>().on(\n        'zoom',\n        (event: D3ZoomEvent<SVGSVGElement, SVGDatum>) => {\n          let scrollValue = event.transform.k;\n\n          // Reached max/min zoom\n          if (scrollValue >= maxScroll) scrollValue = maxScroll;\n          if (scrollValue <= minScroll) scrollValue = minScroll;\n          else {\n            // Update projection\n            projection.scale(initialScale * scrollValue);\n\n            // Update path generator with new projection\n            pathGenerator.projection(projection);\n\n            // Update selectors\n            globeCircle.attr('r', projection.scale());\n            countriesDataJoin.attr('d', pathGenerator);\n          }\n        },\n      );\n\n      /**\n       * Drag behaviour\n       */\n      const dragBehaviour = drag<SVGSVGElement, SVGDatum>().on(\n        'drag',\n        (event: D3DragEvent<SVGSVGElement, SVGDatum, SVGDatum>) => {\n          const [rotationX, rotationY] = projection.rotate();\n          const k = dragSensitivity / projection.scale();\n\n          // Update projection\n          projection.rotate([\n            rotationX + event.dx * k,\n            rotationY - event.dy * k,\n          ]);\n\n          pathGenerator.projection(projection);\n          countriesDataJoin.attr('d', pathGenerator);\n        },\n      );\n\n      // Apply zoom behaviour\n      svg.call(dragBehaviour).call(zoomBehaviour);\n\n      globeCircle.attr('r', projection.scale());\n      countriesDataJoin.attr('d', pathGenerator);\n    }\n  }, [\n    initialScale,\n    maxScroll,\n    minScroll,\n    projection,\n    countries,\n    pathGenerator,\n    dragSensitivity,\n  ]);\n\n  return (\n    <svg ref={svgRef} width={width} height={height} style={svgStyle}>\n      <style>\n        {`\n          path:hover {\n            fill: blue;\n          }\n        `}\n      </style>\n      <circle cx={centerX} cy={centerY} r={circleR} style={circleStyle} />\n      {countries.map((country) => (\n        <path key={country.id} onClick={() => console.log(country)} />\n      ))}\n    </svg>\n  );\n}\n","import { Globe } from \"./Globe/Globe\";\n\nfunction App() {\n  return (\n    <div>\n     <Globe width={200} height={200}/>\n     <Globe width={400} height={400}/>\n     <Globe width={800} height={800}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}