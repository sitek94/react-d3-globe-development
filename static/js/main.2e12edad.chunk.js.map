{"version":3,"sources":["use-countries/get-features.ts","use-countries/get-properties.ts","use-countries/get-countries.ts","use-countries/use-countries.ts","Globe/use-projection.ts","transformations/index.ts","Globe/Globe.tsx","styles.ts","App.tsx","index.tsx"],"names":["countries110m","getFeatures","a","fetch","res","json","topology","countries","objects","feature","features","Error","countriesPropertiesUrl","notFoundCountry","id","name","position","getProperties","csv","then","data","map","row","latitude","longitude","Number","Promise","all","properties","mapPropertiesToFeatures","countryProperties","find","p","useCountries","React","setCountries","status","setStatus","error","setError","current","getCountries","catch","useProjection","props","svgRef","scale","cx","cy","rotateX","rotateY","rotateZ","rotation","dragSensitivity","minScroll","maxScroll","projection","geoOrthographic","center","rotate","translate","pathGenerator","geoPath","length","svg","select","countriesPaths","selectAll","globeCircle","countriesDataJoin","join","call","selection","sensitivity","drag","on","event","rotationX","rotationY","k","dx","dy","attr","dragBehaviour","circleSelection","zoom","scrollValue","transform","zoomBehaviour","rotateTo","duration","currentRotation","nextRotation","r","interpolate","transition","attrTween","d","t","Math","pow","pathD","rotateProjectionTo","Globe","className","size","width","height","classNames","ref","country","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e12edad.chunk.js","sourcesContent":["import { FeatureCollection } from 'geojson';\nimport { feature } from 'topojson-client';\nimport { Topology } from 'topojson-specification';\nimport { Features } from '../types';\n\n/**\n * A fixed version of World Atlas Countries 110m\n *\n * https://github.com/Fil/visionscarto-world-atlas\n */\nconst countries110m =\n  'https://unpkg.com/visionscarto-world-atlas@0.0.6/world/110m.json';\n\n/**\n * Fetches TopoJSON data from CDN and transforms it to Feature Collection using \"feature\"\n * helper from topojson-client\n */\nexport async function getFeatures(): Promise<Features> {\n  const res = await fetch(countries110m);\n  const topology: Topology = await res.json();\n  const countries = topology.objects.countries;\n\n  if (countries) {\n    const { features } = feature(topology, countries) as FeatureCollection;\n\n    return features;\n  } else {\n    throw new Error(`There was no \"countries\" object in \"topology.objects\"`);\n  }\n}\n","import { csv } from 'd3';\nimport { CountriesProperties, CountryProperties, Rotation } from '../types';\n\n/**\n * Countries Properties CSV\n *\n * For each country in this dataset there is\n * - id - ISO code of the country (the same code that is used for ID by World Atlas)\n * - name\n * - latitude\n * - longitude\n */\nconst countriesPropertiesUrl =\n  'https://gist.githubusercontent.com/sitek94/d1c99f4b1936ad047602cc569d30db6b/raw/countries.csv';\n\ntype Columns = 'id' | 'name' | 'latitude' | 'longitude';\n\nconst bermudaTrianglePosition: Rotation = [\n  25.027684437991375, -70.99627570018042,\n];\n\n/**\n * This object is used in unlikely event when some field is missing from fetched CSV file.\n */\nexport const notFoundCountry: CountryProperties = {\n  id: 'unknown',\n  name: 'unknown',\n  position: bermudaTrianglePosition,\n};\n\n/**\n * Fetches the CSV file and transforms it\n */\nexport async function getProperties(): Promise<CountriesProperties> {\n  return csv<Columns>(countriesPropertiesUrl).then(data =>\n    data.map(row => {\n      const { id, name, latitude, longitude } = row;\n\n      // There are no missing fields in the dataset but just in case set\n      // default values\n      if (!id || !name || !latitude || !longitude) {\n        return notFoundCountry;\n      }\n\n      return {\n        id,\n        name,\n        position: [Number(latitude), Number(longitude)],\n      };\n    }),\n  );\n}\n","import { CountriesFeatures, CountriesProperties, Features } from '../types';\nimport { getFeatures } from './get-features';\nimport { getProperties, notFoundCountry } from './get-properties';\n\n/**\n * Fetches both countries features and properties and then extends the features\n * by mapping the properties to them.\n */\nexport async function getCountries(): Promise<CountriesFeatures> {\n  const [features, properties] = await Promise.all([\n    getFeatures(),\n    getProperties(),\n  ]);\n\n  return mapPropertiesToFeatures(properties, features);\n}\n\nfunction mapPropertiesToFeatures(\n  properties: CountriesProperties,\n  features: Features,\n) {\n  return features.map(feature => {\n    const countryProperties = properties.find(p => p.id === feature.id);\n\n    return {\n      ...feature,\n      properties: countryProperties || notFoundCountry,\n    };\n  });\n}\n","import * as React from 'react';\n\nimport { CountriesFeatures } from '../types';\nimport { getCountries } from './get-countries';\n\ntype Status = 'idle' | 'pending' | 'resolved' | 'rejected';\n\nexport function useCountries() {\n  const [countries, setCountries] = React.useState<CountriesFeatures>([]);\n  const [status, setStatus] = React.useState<Status>('idle');\n  const [error, setError] = React.useState<Error | null>(null);\n\n  React.useEffect(() => {\n    let current = true;\n\n    setStatus('pending');\n\n    getCountries()\n      .then(countries => {\n        if (current) {\n          setStatus('resolved');\n          setCountries(countries);\n        }\n      })\n      .catch(error => {\n        if (current) {\n          setStatus('rejected');\n          setError(error);\n        }\n      });\n\n    return () => {\n      current = false;\n    };\n  }, []);\n\n  return { countries, status, error };\n}\n","import * as React from 'react';\nimport { geoOrthographic, geoPath, select } from 'd3';\nimport {\n  dragBehaviour,\n  rotateProjectionTo,\n  zoomBehaviour,\n} from '../transformations';\nimport {\n  CountriesFeatures,\n  CountryFeature,\n  Rotation,\n  SVGDatum,\n} from '../types';\n\nexport interface ProjectionConfig {\n  svgRef: React.RefObject<SVGSVGElement>;\n  countries: CountriesFeatures;\n  scale: number;\n  cx: number;\n  cy: number;\n  rotateX?: number;\n  rotateY?: number;\n  rotateZ?: number;\n  rotation?: Rotation;\n  dragSensitivity?: number;\n  minScroll?: number;\n  maxScroll?: number;\n}\n\nexport function useProjection(props: ProjectionConfig) {\n  const {\n    svgRef,\n    countries,\n\n    // Size\n    scale,\n    cx,\n    cy,\n\n    // Rotation\n    rotateX = 0,\n    rotateY = 0,\n    rotateZ = 0,\n    rotation = [rotateX, rotateY, rotateZ],\n\n    // Interactivity\n    dragSensitivity = 75,\n    minScroll = 0.3,\n    maxScroll = 20,\n  } = props;\n\n  // Projection\n  const projection = React.useMemo(\n    () =>\n      geoOrthographic()\n        .scale(scale)\n        .center([0, 0])\n        .rotate(rotation)\n        .translate([cx, cy]),\n    [scale, rotation, cx, cy],\n  );\n\n  // Path generator\n  const pathGenerator = React.useMemo(() => geoPath(projection), [projection]);\n\n  // Update `path` when `pathGenerator` changes\n  React.useEffect(() => {\n    if (!svgRef.current || !countries.length) {\n      return;\n    }\n\n    const svg = select<SVGSVGElement, SVGDatum>(svgRef.current);\n    const countriesPaths =\n      svg.selectAll<SVGPathElement, CountryFeature>('path');\n    const globeCircle = svg.select<SVGCircleElement>('circle');\n\n    const countriesDataJoin = countriesPaths.data(countries).join('path');\n\n    // Apply zoom and drag\n    svg\n      .call(\n        dragBehaviour({\n          selection: countriesDataJoin,\n          pathGenerator,\n          projection,\n          sensitivity: dragSensitivity,\n        }),\n      )\n      .call(\n        zoomBehaviour({\n          selection: countriesDataJoin,\n          circleSelection: globeCircle,\n          pathGenerator,\n          projection,\n          scale,\n          minScroll,\n          maxScroll,\n        }),\n      );\n\n    globeCircle.attr('r', projection.scale());\n    countriesDataJoin.attr('d', pathGenerator);\n  }, [\n    svgRef,\n    scale,\n    maxScroll,\n    minScroll,\n    projection,\n    countries,\n    pathGenerator,\n    dragSensitivity,\n  ]);\n\n  function rotateTo(rotation: Rotation) {\n    if (!svgRef.current) {\n      return;\n    }\n    const svg = select<SVGSVGElement, SVGDatum>(svgRef.current);\n    const countriesPaths =\n      svg.selectAll<SVGPathElement, CountryFeature>('path');\n\n    rotateProjectionTo({\n      selection: countriesPaths,\n      projection,\n      pathGenerator,\n      rotation,\n    });\n  }\n\n  return {\n    rotateTo,\n  };\n}\n","import { D3ZoomEvent, interpolate, zoom } from 'd3';\nimport { D3DragEvent, drag } from 'd3-drag';\nimport {\n  CountriesPathsSelection,\n  GlobeCircleSelection,\n  GlobePathGenerator,\n  GlobeProjection,\n  Rotation,\n  SVGDatum,\n} from '../types';\n\ninterface Helper {\n  selection: CountriesPathsSelection;\n  projection: GlobeProjection;\n  pathGenerator: GlobePathGenerator;\n}\n\ninterface RotateProjectionToParams extends Helper {\n  rotation: Rotation;\n  duration?: number;\n}\n\n/**\n * A function that makes a transition from current projection.rotation to\n * given rotation\n */\nexport function rotateProjectionTo({\n  selection,\n  projection,\n  pathGenerator,\n  duration = 1000,\n  rotation,\n}: RotateProjectionToParams) {\n  // Store the current rotation value\n  const currentRotation = projection.rotate();\n\n  // Update path generator with new projection\n  pathGenerator.projection(projection);\n\n  // Set next rotation\n  const nextRotation = rotation;\n\n  // Create interpolator function - that will make the transition from\n  // current rotation to the next rotation\n  const r = interpolate(currentRotation, nextRotation);\n\n  // Update selection\n  selection\n    .transition()\n    .attrTween('d', d => t => {\n      projection.rotate(r(Math.pow(t, 0.33)));\n      pathGenerator.projection(projection);\n\n      // When interpolator returns null, Chrome throws errors for\n      // <path> with attribute d=\"null\"\n      const pathD = pathGenerator(d);\n      return pathD !== null ? pathD : '';\n    })\n    .duration(duration);\n}\n\ninterface DragBehaviourParams extends Helper {\n  sensitivity: number;\n}\n\n/**\n * Drag behaviour\n */\nexport function dragBehaviour({\n  selection,\n  projection,\n  pathGenerator,\n  sensitivity,\n}: DragBehaviourParams) {\n  return drag<SVGSVGElement, SVGDatum>().on(\n    'drag',\n    (event: D3DragEvent<SVGSVGElement, SVGDatum, SVGDatum>) => {\n      const [rotationX, rotationY] = projection.rotate();\n      const k = sensitivity / projection.scale();\n\n      // Update projection\n      projection.rotate([rotationX + event.dx * k, rotationY - event.dy * k]);\n\n      pathGenerator.projection(projection);\n      selection.attr('d', pathGenerator);\n    },\n  );\n}\n\ninterface ZoomBehaviourParams extends Helper {\n  minScroll: number;\n  maxScroll: number;\n  scale: number;\n  circleSelection: GlobeCircleSelection;\n}\n\n/**\n * Zoom behaviour\n */\nexport function zoomBehaviour({\n  selection,\n  circleSelection,\n  pathGenerator,\n  projection,\n  scale,\n  minScroll,\n  maxScroll,\n}: ZoomBehaviourParams) {\n  return zoom<SVGSVGElement, SVGDatum>().on(\n    'zoom',\n    (event: D3ZoomEvent<SVGSVGElement, SVGDatum>) => {\n      let scrollValue = event.transform.k;\n\n      // Reached max/min zoom\n      if (scrollValue >= maxScroll) scrollValue = maxScroll;\n      if (scrollValue <= minScroll) scrollValue = minScroll;\n      else {\n        // Update projection\n        projection.scale(scale * scrollValue);\n\n        // Update path generator with new projection\n        pathGenerator.projection(projection);\n\n        // Update selectors\n        circleSelection.attr('r', projection.scale());\n        selection.attr('d', pathGenerator);\n      }\n    },\n  );\n}\n","import * as React from 'react';\n\nimport { styles } from '../styles';\nimport { useCountries } from '../use-countries/use-countries';\nimport { useProjection } from './use-projection';\n\nexport interface GlobeProps {\n  className?: string;\n  /**\n   * A shorthand for height and width of the SVG element\n   */\n  size?: number;\n}\n\nfunction Globe(props: GlobeProps) {\n  const { className, size = 400 } = props;\n\n  const width = size;\n  const height = size;\n  const cx = width / 2;\n  const cy = height / 2;\n  const r = size / 2;\n\n  const svgRef = React.useRef<SVGSVGElement>(null);\n  const { countries } = useCountries();\n  const { rotateTo } = useProjection({\n    cx,\n    cy,\n    scale: size / 2,\n    svgRef,\n    countries,\n  });\n\n  const classNames = `react-d3-globe ${className}`;\n\n  return (\n    <svg ref={svgRef} width={width} height={height} className={classNames}>\n      <style>{styles}</style>\n      <circle cx={cx} cy={cy} r={r} className=\"ocean\" />\n      {countries.map(country => (\n        <path\n          className=\"country\"\n          key={country.id}\n          onClick={() => rotateTo(country.properties.position)}\n        />\n      ))}\n    </svg>\n  );\n}\n\nexport { Globe };\n","export const styles = `\n.react-d3-globe {\n  --country-color: lightgreen;\n  --country-hover-color: limegreen;\n  --ocean-color: dodgerblue;\n  --ocean-hover-color: royalblue;\n}\n\n.react-d3-globe .country {\n  fill: var(--country-color);\n  stroke: var(--country-color);\n}\n.react-d3-globe .country:hover {\n  fill: var(--country-hover-color);\n  stroke: var(--country-hover-color);\n}\n.react-d3-globe .ocean {\n  fill: var(--ocean-color);\n}\n.react-d3-globe .ocean:hover {\n  fill: var(--ocean-color);\n}\n`;\n","import { Globe } from './Globe/Globe';\nimport './App.css' \n\nfunction App() {\n  return (\n    <div>\n      <Globe size={500} />\n      <Globe className=\"orange\" size={450} />\n      <Globe className=\"violet\" size={375} />\n      <Globe className=\"blue\" size={300} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}